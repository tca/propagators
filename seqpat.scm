(load "./propagator.scm")

(define (agent-fold agent-constructor make-cell cells)
  (foldr
   (lambda (m c)
     (let ((res-c (make-cell)))
       (agent-constructor c m res-c)
       res-c))
   (car cells)
   (cdr cells)))

(define (unit-pat char)
  (let ((c (interval-cell)))
    (merge! c (list (interval 1 1)))
    c))

(define (rep-pat pat min-reps max-reps)
  (let ((reps (interval-cell))
        (subpat-size pat)
        (total (interval-cell)))
    (merge! reps (list (interval min-reps max-reps)))
    (interval-product-agent reps subpat-size total)))

(define (seq-pat . pats)
  (agent-fold interval-sum-agent interval-cell pats))

(define (and-pat . pats)
  (agent-fold interval-disj-agent interval-cell-growing pats))

(define (or-pat . pats)
  (agent-fold interval-conj-agent interval-cell pats))

(define (eval-pat pat)
  (let ((c (cond ((string? pat) (eval-pat `(seq . ,(string->list pat))))
                 ((char? pat) (unit-pat pat))
                 ((list? pat) (apply (case (car pat)
                                       ((not) unit-pat)
                                       ((and) and-pat)
                                       ((or) or-pat)
                                       ((seq) seq-pat)
                                       ((rep) rep-pat))
                                     (map eval-pat (cdr pat)))))))
    (yield! pat c)
    c))

(define pats '())
(define (yield! pat c) (set! pats (cons (list pat c) pats)))
(define (pat-size pat)
  (set! pats '())
  (eval-pat pat)
  (newline)
  (write pat)
  (newline)
  (display "----------")
  (newline)
  (map (lambda (x)
         (merge! (cadr x) `(,(interval 1 1))) ;; make sure the cell runs
         (write (list (car x) (push-prompt p (interval->pair (ref-cell (cadr x))))))
         (newline))
       pats))

(pat-size '(or "asd" "a"))
(pat-size '(and "x" "xx" "x"))
;;(pat-size `(and "xxx" (rep "x" 1 ,(wildcard))))
(pat-size "hi")
(pat-size '(seq #\h #\i))
(pat-size #\x)
;; (pat-size '(rep "hi" 1 2))
;; (pat-size '(rep (rep "hi" 1 2) 1 2))
;; (pat-size '(not (rep "hi" 1 2)))
;; (pat-size '(seq "asd" #\c (rep "qdf" 1 3)))
;; (pat-size `(and "aab" (seq "a" "a" "a") (rep "a" 1 ,_)))
;; (pat-size `(rep "q" 1 ,_))
;; (pat-size `(seq "asd" (rep "q" 1 ,_)))
