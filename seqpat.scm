(load "./propagator.scm")

(define (agent-fold agent-constructor make-cell cells)
  (foldr
   (lambda (m c)
     (let ((res-c (make-cell)))
       (agent-constructor m c res-c)
       res-c))
   (car cells)
   (cdr cells)))

(define (unit-pat char)
  (let ((c (interval-cell)))
    (merge! c (list (interval 1 1)))
    c))

(define (rep-pat pat min-reps max-reps)
  (let ((reps (interval-cell))
        (subpat-size pat)
        (total (interval-cell)))
    (merge! reps (list (interval min-reps max-reps)))
    (interval-product-agent reps subpat-size total)
    total))

(define (seq-pat . pats)
  (agent-fold interval-sum-agent interval-cell pats))

(define (and-pat . pats)
  (agent-fold interval-conj-agent interval-cell pats))

(define (or-pat . pats)
  (agent-fold interval-disj-agent interval-cell-shrink pats))

(define (eval-pat pat)
  (let ((c (cond ((string? pat) (eval-pat `(seq . ,(string->list pat))))
                 ((char? pat) (unit-pat pat))
                 ((list? pat) (case (car pat)
                                       ((not) (apply unit-pat  (map eval-pat (cdr pat))))
                                       ((and) (apply and-pat (map eval-pat (cdr pat))))
                                       ((or) (apply or-pat (map eval-pat (cdr pat))))
                                       ((seq) (apply seq-pat (map eval-pat (cdr pat))))
                                       ((rep) (rep-pat (eval-pat (cadr pat)) (caddr pat) (cadddr pat))))))))
    (yield! pat c)
    c))
(define torun '())
(define (yield2! c) (set! torun (cons c torun)))
(define pats '())
(define (yield! pat c) (set! pats (cons (list pat c) pats)))
(define (pat-size pat)
  (set! pats '())
  (set! torun '())
  (set! all-observers '())
  (eval-pat pat)
  (for-each run-agent! all-observers)
  (newline)
  (write pat)
  (newline)
  (display "----------")
  (newline)
  (map (lambda (x)
         (write (list (car x) (push-prompt p (interval->pair (ref-cell (cadr x))))))
         (newline))
       pats))

(pat-size `(rep "hfd" 1 2))
;;(pat-size `(or (rep "hfd" 1 2) "q"))
;;(pat-size `(seq (rep "hfd" 1 2) "q" (rep "aa" 1 3)))
(quit)
